peaks <- keepStandardChromosomes(his_h1)
peaks
seqinfo(peaks)
peaks <- dropSeqlevels(peaks, c('chrX', 'chrY', 'chrM'))
seqinfo(peaks)
sum(width(peaks))
peaks
head(peaks$signalValue)
mean(peaks$signalValue)
length(peaks)
sum(peaks$signalValue)
sum(peaks$signalValue)/40550
histone2 <- query(ah, 'H3K27me3')
histone2
histone2 <- query(histone2, 'H1 Cells')
histone2
histone2 <- query(histone2, 'EpigenomeRoadmap')
histone
histone2
K27 <- histone2[[2]]
peaks27 <- keepStandardChromosomes(K27)
peaks27 <- dropSeqlevels(peaks27, c('chrX', 'chrY', 'chrM'))
peaks27
means(peaks27$signalValue)
mean(peaks27$signalValue)
ov <- findOverlaps(peaks, peaks27)
ov
sum(width(ov))
sum(ov)
length(ov)
width(ov)
sum(ov)
length(unique(queryHits(ov)))
length(unique(subjectHits(ov)))
sum(width(intersect(peaks, peaks27)))/10^6
cpg_is_a
peaks_cmb <- intersect(peaks, peaks27)
peaks_cmb
ov <- findOverlaps(peakcs_cmb, cpg_is_a)
ov <- findOverlaps(peaks_cmb, cpg_is_a)
ov
length(unique(queryHits(ov)))/length(peaks_cmb)
length(unique(subjectHits(ov)))/length(cpg_is_a)
length(unique(subjectHits(ov)))/length(cpg_is)
length(unique(subjectHits(ov)))/length(peaks_cmb)
ov2 <- findOverlaps(peaks_cmb, cpg_is)
length(unique(subjectHits(ov2)))/length(cpg_is)
length(unique(queryHits(ov2)))/length(cpg_is_a)
length(subjectHits(ov))/length(cpg_is_a)
length(unique(subjectHits(ov))/length(cpg_is_a)
)
length(unique(subjectHits(ov)))/length(cpg_is_a)
?resize
resize
cpg_resized <- resize(cpg_is_a, width = 10000)
cpg_resized
length(cpg_resized
)
cpg_is_a
cpg_flank <- flank(cpg_is_a, width = 10000, both = TRUE, ignore.strand = TRUE)
cpg_flank
intersct(peaks_cmb, cpg_is_a)
intersect(peaks_cmb, cpg_is_a)
sum(width(intersect(peaks_cmb, cpg_is_a))
)
sum(width(intersect(peaks_cmb, cpg_flank)))
sum(width(intersect(peaks_cmb, cpg_flank))) - sum(width(intersect(peaks_cmb, cpg_is_a)))
cpg
cpg_is
seqlength(cpg)
seqlengths(cpg)
seqlengths(cpg_is)
as.numeric(seqlengths(cpg_is))
sum(as.numeric(seqlengths(cpg_is)))
sum(width(cpg_is))
sum(width(cpg_is))/sum(as.numeric(seqlengths(cpg_is)))
cpg
islands <- cpg[[1]]
islands$genome
islands
sum(width(islands))
sum(width(islands))/sum(as.numeric(seqlengths(cpg_is)))
islands <- keepStandardChromosomes(islands)
islands <- dropSeqlevels(islands, c('chrX', 'chrY', 'chrM'))
islands
ov <- findOverlaps(peaks_cmb, islands)
length(unique(subjectHits(ov))/length(islands)
)
length(unique(subjectHits(ov)))/length(islands)
islands_flanked <- flank(islands, width = 10000, both = TRUE)
sum(width(intersect(peaks_cmb, islands)))
sum(width(intersect(peaks_cmb, islands_flanked)))
islands_flanked <- flank(islands, width = 10000)
sum(width(intersect(peaks_cmb, islands_flanked)))
inOut <- matrix(0, ncol =2, nrow=2)
inOut
inOut[1,1] = sum(width(peaks_cmb))
inOut[1, 2] = sum(width(islands))
inOut
inOut[1, 1] = sum(width(intersect(peaks_cmb, islands))
)
inOut
inOut[1,2]<- sum(width(setdiff(peaks_cmb, islands)))
inOut[2,1]<- sum(width(setdiff(islands, peaks_cmb)))
inOut
inOut[2,2]= 3*10^9 - sum(inOut)
inOut
oddsRation = (inOut[1,2]*inOut[2,1])/(inOut[2,2]*inOut[1,1])
oddsRation
1/oddsRation
biocLite("pathview")
library(pathview)
gene.ensprot <- sim.mol.data(mol.type = "gene", id.type = gene.idtype.list[4], nmol = 50000)
id.map.ensprot <- id2eg(ids = names(gene.ensprot), category = gene.idtype.list[4], org = "Hs")
head(id.map.ensprot)
gene.ensprot <- sim.mol.data(mol.type = "gene", id.type = gene.idtype.list[4], nmol = 50000)
id.map.ensprot <- id2eg(ids = names(gene.ensprot), category = gene.idtype.list[4], org = "Hs")
library(BSgenome)
library(BSgenome.Hsapiens.UCSC.hg19)
available.genomes()
Hsapiens
sap_chr <- Hsapiens$chr22
length(sap_chr)
(CG_con <- (letterFrequency(sap_chr, 'CG')/(length(sap_chr)-letterFrequency(sap_chr, "N"))))
letterFrequency(sap_chr, 'CG', as.prob = TRUE)
library(AnnotationHub)
ah <- AnnotationHub()
ah <- subset(ah, species == "Homo sapiens")
query(ah, c("E003", "H3K27me3"))
query(ah, c("E003", "H3K27me3"))[2]
nP <- ah2[[2]]
ah2 <- query(ah, c("E003", "H3K27me3"))
nP <- ah2[[2]]
nP
nP$genome
genome(nP)
seqnames(nP)
nP$chr22
nP[seqnames(nP) == 'chr22']
nP22 <- nP[seqnames(nP) == 'chr22']
nPviews <- Views(sap_chr, nP22)
nPviews <- Views(Sapiens, nP22)
nPviews <- Views(Hsapiens, nP22)
head(nPviews)
nP22
nPviews
gcnP <- letterFrequency(nPviews, "GC", as.prob = TRUE)
head(gcnP)
mean(gcnP)
?correlation
??correlation
nPviews$signalValue
nPviews[6]
nPviews[,6]
signalValue(nPviews)
strand(nPviews)
signalValue(nPviews)
nPviews$signalValue
nPviews$peak
nP$signalValue
cor(gcnP, nP22$signalValue)
ah
ah2
nP.fc <- ah2[[4]]
nP.fc
library(rtracklayer)
(nP.fc.22 <- import(nP.fc, which = nP22))
nP22
(nP.fc.22 <- import(nP.fc, which = nP22))
nP22
seqinfo(nP.fc.22)
nP22
nP.fc.22[seqnames(nP.fc.22)== "chr22"]
(nP.fc.22 <- import(nP.fc, which = nP22.chr22))
nP22
seqnames(nP22)
nP.fc
?import
(nP.fc.22 <- import(nP.fc, format = "BigWig", which = nP22.chr22))
(nP.fc.22 <- import(nP.fc, format = "BigWig", which = nP22))
nP
(fc.views <- Views(nP.fc.22, nP22))
seqinfo(nP.fc.22)
length(nP.fc.22[seqnames(nP.fc.22) == "chr22"])
length(nP.fc.22)
?`findOverlaps,GenomicRanges,GenomicRanges-method`
findOverlapPairs(nP22, nP.fc.22)
findOverlaps(nP22, nP.fc.22, ignore.strand = TRUE)
summary(findOverlaps(nP22, nP.fc.22, ignore.strand = TRUE))
?Views
(nP.fc.22 <- import(nP.fc, which = nP22, as = "Rle"))
(fc.views <- Views(nP.fc.22, nP22))
list.np22 <- GRangesList(nP22)
(fc.views <- Views(nP.fc.22, list.np22))
class(list.np22)
list.np22 <- RangesList(nP22)
nP22
list.np22 <- RangesList(c(nP22))
list.np22 <- GRangesList(nP22)
list.np22 <- RangesList(list.np22)
?RangesList
gr.chr22 <- GRanges(seqnames = "chr22", ranges = IRanges(start = 1, end = seqlengths(Hsapiens)["chr22"]))
out.chr22 <- import(nP.fc, which = gr.chr22, as = "Rle")
fc.views <- Views(out.chr22, nP22)
fc.views <- Views(out.chr22, GrangesList(nP22))
fc.views <- Views(out.chr22, GRangesList(nP22))
fc.views <- Views(out.chr22, RangesList(nP22))
fc.views <- Views(out.chr22, as(nP22, "RangesList"))
(nP.fc.22 <- import(nP.fc, which = nP22, as = "Rle"))
(fc.views <- Views(nP.fc.22, as(nP22, "RangesList")))
gr.chr22 <- GRanges(seqnames = "chr22", ranges = IRanges(start = 1, end = seqlengths(Hsapiens)["chr22"]))
out.chr22 <- import(nP.fc, which = gr.chr22, as = "Rle")
fc.views <- Views(out.chr22, as(gr.chr22, "RangesList"))
length(gr.chr22)
length(out.chr22)
out.chr22
fc.views <- Views(out.chr22$chr22, as(gr.chr22, "RangesList"))
fc.views <- Views(out.chr22$chr22, as(nP22, "RangesList"))
out.chr22$chr22
gr.chr22
nP22
gr <- GRanges(seqnames = "chr1", ranges = IRanges(start = 1:10, width = 3))
rl <- coverage(gr)
rl
grView <- GRanges("chr1", ranges = IRanges(start = 2, end = 7))
vi <- Views(rl, grView)
vi <- Views(rl, as(grView, "RangesList"))
vi
grView
gr.chr22
rl
out.chr22$chr22
?`view-summarization-methods`
?Vies
?Views
gr.chr22 <- GRanges(seqnames = "chr22", ranges = IRanges(start = 1, end = seqlengths(Hsapiens)["chr22"]))
out.chr22 <- import(nP.fc, which = gr.chr22, as = "Rle")
fc.views <- Views(out.chr22$chr22, as(gr.chr22, "RangesList"))
as(gr.chr22, "RangesList")
out.chr22$chr22
rl
names(out.chr22)
coverage(out.chr22$chr22)
?Rle
?`coverage,GRangesList-method`
aggregate(out.chr22$chr22, IRanges = nP22, FUN = mean)
nP22
x <- aggregate(out.chr22$chr22, IRanges = nP22, FUN = mean)
head(x)
x <- aggregate(out.chr22, IRanges = nP22, FUN = mean)
x
out.chr22
out.chr22$chr22
nP.fc
out.chr22
nP22
?import
np22 <- as(nP22, "RangesList")
out.2 <- import(nP.fc, format = "bw", which = np22, as = "Rle")
out.2 <- import(nP.fc, which = np22, as = "Rle")
out.2
out.2$chr22
out.chr22$chr22
?Views
fc.views
fc.views <- Views(out.2$chr22, np22)
fc.views <- Views(out.2$chr22, as (nP22, "IRanges"))
fc.views <- Views(out.2$chr22, as (nP22, "GRanges"))
out.chr22 <- import(nP.fc, which = nP22)
out.chr22$chr22
out.chr22
?`findOverlaps,GenomicRanges,GRangesList-method`
out.2
out.2$chr22
gr1
out.chr22$chr22
out.chr22
(nP.fc.22 <- import(nP.fc, which = nP22, as = "Rle"))
nP.fc.22$chr22
my.rle <- nP.fc.22$chr22
my.rle
np22
np22$chr22
fc.views <- Views(my.rle, np22$chr22)
fc.views
fc.views@metadata
fc.views$start
start(fc.views)
score(fc.views)
metadata(fc.views)
fc.views[1]
mean(fc.views)
fc.views
?`Views,BSgenome-method`
names(fc.view)
names(fc.views)
seqnames(fc.views)
elementNROWS(fc.views)
?mean
?`view-summarization-methods`
?Views
`Views,numeric-method`
?`Views,numeric-method`
fc.views[[1]]
mean(fc.views[[1]])
mean(values(fc.views[[1]])
0
mean(values(fc.views[[1]]))
values(fc.views[[1]])
mean(as.numeric(fc.views[[1]]))
as.numeric(fc.views[[1]])
max(as.numeric(fc.views[[1]]))
min(as.numeric(fc.views[[1]]))
nP22$signalValue
cor(mean(fc.views), nP22$signalValue)
gr.22
gr22
gr.chr22
new_re <- import(nP.fc, which = gr.chr22, as = "Rle")
new_re
new_re <- new_re$chr22
new_re
new_re[runValue(new_re) > 1]
new_re
length(new_re)
length(new_re[runValue(new_re) >1])
length(new_re[runValue(new_re) >2])
head(runValue(new_re))
my.rle
length(my.rle(runValue(my.rle) > 1))
length(my.rle[runValue(my.rle) > 1])
head(runValue(new_re[runValue(new_re)>1]))
x <- 1:20
x[x>10]
x
length(as.numeric(new_re[new_re >=1]))
fc.views
fc.mean <- mean(fc.views)
head(fc.mean)
max(fc.mean)
mean(fc.mean)
new_re
gr.chr22
np22$chr22
new_fc.view <- Views(new_rle, as(gr.chr22, "RangesList"))
new_fc.view <- Views(new_re, as(gr.chr22, "RangesList"))
new_fc.view <- Views(new_re, as(gr.chr22, "IRanges"))
ranges(gr.chr22)
new_fc.view <- Views(new_re, ranges(gr.chr22))
new_fc.view
new_re <- import(nP.fc, which = gr.chr22)
new_re <- new_re$chr22
new_re
new_re <- import(nP.fc, which = gr.chr22)
new_re
new_re$score
new_re[new_re$score <= 0.5]
new_re
ah
ah2
ah3 <- query(ah, c("E005", "H3K27me3"))
ah3
e005.fc <- ah3[[5]]
e005.s <- import(e005.fc, which = gr.chr22)
e005.s
e003.lo <- new_re[new_re$score <= 0.5] #fc.signal E003
e005.hi <- e005.s[e005.s$score > 2]
e005.hi
intersect(e003.lo, e005.hi)
sum(width(intersect(e003.lo, e005.hi))
)
width(intersect(e003.lo, e005.hi))
e005.hi <- e005.s[e005.s$score >= 2]
e005.hi
e003.lo
sum(width(e005.hi))
sum(width(e003.lo))
sum(width(intersect(e003.lo, e005.hi))
)
intersect(e003.lo, e005.hi)
ah3
ah3 <- query(ah, c("E055", "H3K27me3"))
ah3
e055.fc <- ah3[[5]]
e055.s <- import(e055.fc, which = gr.chr22)
e055.hi <- e055.s[e055.s$score >= 2]
sum(width(intersect(e003.lo, e055.hi)))
ah
ah4 <- subset(ah, species == "Homo sapiens")
ah4
query(ah4, "CpG islands")
ah4 <- subset(ah, species == "Homo Sapiens")
ah4 <- query(ah4, "CpG islands")
ah4
ah4 <- subset(ah, species == "Homo sapiens")
ah4 <- query(ah4, "CpG islands")
ah4
ah4[1]
cpg <- ah4[[1]]
cpg
seqnames(cp)
seqnames(cpg)
seqlevels(cpg)
cpg <- cpg$chr22
cpg
cpg <- ah4[[1]]
cpg.22 <- keepSeqlevels(cpg, "chr22")
cpg.22
Hsapiens
sap_chr
cpg.views <- Views(Hsapiens, cpg.22)
cpg.views
length(cpg.views)
width(cpg.views)
length(width(cpg.views))
letterFrequency(cpg.views, "GC", as.prob = TRUE)
mean(letterFrequency(cpg.views, "N", as.prob = TRUE))
mean(letterFrequency(cpg.views, "CpG", as.prob = TRUE))
mean(letterFrequency(cpg.views, "CG", as.prob = TRUE))
mean.obs.CpG <- mean(letterFrequency(cpg.views, "CG", as.prob = TRUE))
(letterFrequency(cpg.views, "C"))* (letterFrequency(cpg.views, "G"))/width(cpg.views)
mean((letterFrequency(cpg.views, "C"))* (letterFrequency(cpg.views, "G"))/width(cpg.views))
letterFrequency(cpg.views, "C")
mean(letterFrequency(cpg.views, "C", as.prob = TRUE))
mean(letterFrequency(cpg.views, "G", as.prob = TRUE))
(letterFrequency(cpg.views, "C", as.prob = TRUE))* (letterFrequency(cpg.views, "G", as.prob = TRUE))/width(cpg.views)
mean((letterFrequency(cpg.views, "C"))* (letterFrequency(cpg.views, "G"))/width(cpg.views))
(letterFrequency(cpg.views, "C"))* (letterFrequency(cpg.views, "G"))/width(cpg.views)
mean((letterFrequency(cpg.views, "C"))* (letterFrequency(cpg.views, "G"))/width(cpg.views))
0.69/0.96
mean.obs.CpG/0.96
mean.obs.CpG/0.9621226
width(cpg.views)
letterFrequency(cpg.views, "C")/width(cpg.views)
(letterFrequency(cpg.views, "C")+ letterFrequency(cpg.views, "G"))/width(cpg.views)
mean((letterFrequency(cpg.views, "C")+ letterFrequency(cpg.views, "G"))/width(cpg.views))
mean.obsCpG/0.6962
mean.obs.CpG/0.6962
mean((letterFrequency(cpg.views, "C")* letterFrequency(cpg.views, "G"))/width(cpg.views))
0.34*0.34
mean.obs.CpG
mean.obs.CpG/0.8
mean(letterFrequency(cpg.viess, "CG"))
mean(letterFrequency(cpg.views, "CG"))
countPattern(cpg.views, "CG")
mean(letterFrequency(cpg.views, c("CG"))
)
countPattern(cpg.views, c("CG")
)
cg <- DNAString("CG")
countPattern(cpg.views, cg)
class(cg)
countPattern(cg, cpg.views)
vcountPattern(cg, cpg.views)
vcountPattern(cg, sap_chr)
countPattern(cg, sap_chr)
countPattern(cg, cpg.22)
countPattern(cg, cpg.views)
cpg.views
cpg.views$dna
dna(cpg.views)
library(BSgenome.Hsapiens.UCSC.hg19)
Hsapiens
Hsapiens$chr22
library(readr)
combined_counts <- read_csv("~/Google Drive/UPEC/Analysis/core-genome-analysis/get-homologs/counts/combined_counts.csv")
View(combined_counts)
setwd("~/Google Drive/UPEC/Analysis/core-genome-analysis/get-homologs/counts")
head(combined_counts)
complete.cases()
complete.cases?
?complete.cases
cc <- complete.cases(combined_counts)
head(cc)
df <- combined_counts[cc,]
head(df)
dim(df)
df.colnames
colnames(df)
rownames(df)
colnames(df) <- df[Gene_id]
rownames(df) <- df$Gene_id
head(df)
rownames(df)
dim(df)
head(df)
df <- df[,2:]
df <- df[,2:27]
head(df)
rownames(df)
df <- combined_counts[cc,]
head(df)
rownames(df) <- df$Gene_id
rownames(df) <- df[,1]
nrow(df)
length(df$Gene_id)
row.names(df) <- df$Gene_id
length(df[,1])
df[,1]
df[1,]
df[,1] <- NULL
head(df)
df <- combined_counts[cc,]
head(df)
df[1,]
core <- df[,-1]
head(core)
rownames(core) <- df$Gene_id
head(core)
rownames(core)
core['16504_yrfG']
core$16504_yrfG
