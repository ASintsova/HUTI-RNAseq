colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
parm = substring("~PRED_PHYLO",1)[2]
print (dds_transformed$parm)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$parm, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
parm = substring("~PRED_PHYLO",1)[2]
print (parm)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$parm, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
parm = substring("~PRED_PHYLO",1)
print (parm)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$parm, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
parm = substring("~PRED_PHYLO",2)
print (parm)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$parm, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
parm = substring("~PRED_PHYLO",2)
print (dds_transformed$parm)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$parm, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$PRED_PHYLO, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$ANCESTRY, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$PRED_PHYLO, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
dds_transformed <- log2(counts(counts_dds) + 1)
head(dds_transformed)
dds_transformed <- log2(counts(counts_dds) + 1)
head(dds_transformed)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dds_transformed <- log2(counts(counts_dds) + 1)
head(dds_transformed)
core_dists <- dist(t(dds_transformed))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$PRED_PHYLO, sep = "_")
dds_transformed <- log2(counts(counts_dds) + 1)
head(dds_transformed)
core_dists <- dist(t(dds_transformed))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(urine_info$STRAIN, urine_info$PRED_PHYLO, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dds_transformed <- rlog(counts_dds, blind = FALSE)
head(assay(dds_transformed))
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$PRED_PHYLO, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$RBC_COUNTS, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
plotPCA(dds_transformed, intgoup = c("PRED_PHYLO"))
plotPCA(dds_transformed, intgroup = c("PRED_PHYLO"))
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$PRED_ANCESTRY, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library (pheatmap)
library(RColorBrewer)
library (ggplot2)
plotPCA(dds_transformed, intgroup = c("STRAIN"))
plotPCA(dds_transformed, intgroup = c("PRED_PHYLO"))
write.csv(core_genes, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/core_gene_counts.csv", row.names=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library (pheatmap)
library(RColorBrewer)
library (ggplot2)
plotPCA(dds_transformed, intgroup = c("STRAIN", "MEDIA"))
knitr::opts_chunk$set(echo = TRUE)
library(DESeq2)
library (pheatmap)
library(RColorBrewer)
library (ggplot2)
counts <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/core_gene_counts.csv", header = TRUE, row.names = 1)
experiment_info <- read.csv("~/git_repos/HUTI-RNAseq/analysis/Patient_meta_info.csv", header = TRUE, row.names =1)
head(counts, 1)
head(experiment_info, 1)
design = ~MEDIA
(counts_dds <- DESeqDataSetFromMatrix(countData = as.matrix(counts), colData = experiment_info, design = design))
dds_transformed <- rlog(counts_dds, blind = FALSE)
head(assay(dds_transformed))
core_dists <- dist(t(assay(dds_transformed)))# calculated distances
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(dds_transformed$STRAIN, dds_transformed$MEDIA, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix, #draw heatmap
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
plotPCA(dds_transformed, intgroup = c("STRAIN", "MEDIA"))
write.csv(core_genes, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/core_gene_counts.csv", row.names=TRUE)
#Dependencies
library(DESeq2)
library (pheatmap)
library(RColorBrewer)
library (ggplot2)
source("~/git_repos/HUTI-RNAseq/code/RNAseq_counts_analysis_R/RNAseq_analysis_utilities.R")
#Importing the counts
combined_counts <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/combined_counts.csv", header = TRUE, row.names = 1)
#Importing metadata
experiment_info <- read.csv("~/git_repos/HUTI-RNAseq/analysis/Patient_meta_info.csv", header = TRUE, row.names =1)
head(combined_counts)
#Isolating Core Genes
core_genes = combined_counts[complete.cases(combined_counts),]
summary(core_genes)
(even <- seq(2, 26, 2))
(odd <- seq(1, 26, 2))
#Seperationg urine and uti samples
core_urine <- core_genes[,odd]
core_uti <- core_genes[,even]
urine_info <- experiment_info[odd, ]
uti_info <- experiment_info[even,]
write.csv(core_genes, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/core_gene_counts.csv", row.names=TRUE)
write.csv(core_urine, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/core_counts_urine.csv", row.names=TRUE)
write.csv(core_uti, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/core_counts_uti.csv", row.names=TRUE)
write.csv(urine_info, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/urine_info.csv", row.names=TRUE)
write.csv(uti_info, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/uti_info.csv", row.names=TRUE)
# Construct DESeqDataSet object from the matrix of counts and the experiment_info
(core_dds <- DESeqDataSetFromMatrix(countData = as.matrix(core_genes), colData = experiment_info,
design = ~MEDIA))
(core_uti_dds <- DESeqDataSetFromMatrix(countData = as.matrix(core_uti), colData = uti_info,
design = ~PRED_PHYLO))
(core_urine_dds <- DESeqDataSetFromMatrix(countData = as.matrix(core_urine), colData = urine_info,
design = ~PRED_PHYLO))
#Pre-filtering the dataset: removing rows of DESeqDataSet that have not counts
#or only single count across all samples
core_dds_filtered <- core_dds[rowSums(counts(core_dds)) > 1,]
dim(core_dds_filtered)
core_urine_dds_filtered <- core_urine_dds[rowSums(counts(core_urine_dds))>1, ]
dim(core_urine_dds_filtered)
core_uti_dds_filtered <- core_uti_dds[rowSums(counts(core_uti_dds)) >1,]
dim(core_uti_dds_filtered)
## COMMENT: This filtering step did not help, probably want to filter only based on UTI samples, UR samples will
## probalby have counts, or need to set a differnt threshhold?
#Data transform: DESeq2 specific, there are disadvantages to doing clustering analysis on RPKMs,
# and even normal log transforms
core_dds_transformed <- rlog(core_dds, blind=FALSE)#FALSE settin gwill means differences due to
# design are not taken into account
par(mfrow = c(2, 7))
for (i in odd){
print (i)
print (i+1)
plot(assay(core_dds_transformed)[,i:(i+1)], pch =16, cex =0.3)
}
# How do I save this?
#R function dist to calculate Euclidean distance between samples
#Transform matrix
core_dists <- dist(t(assay(core_dds_transformed)))
dists_matrix <- as.matrix(core_dists)
rownames(dists_matrix)<- paste(core_dds_transformed$STRAIN, core_dds_transformed$MEDIA, sep = "_")
colnames(dists_matrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(dists_matrix,
clustering_distance_rows=core_dists,
clustering_distance_cols=core_dists,
col=colors)
# Look at other clustering methods: hclust??
plotPCA(core_dds_transformed, intgroup = c("MEDIA"))
#for (name in colnames(experiment_info)){
#        plotPCA(core_dds_transformed, intgroup = c(name))
#}
# this did not work, need to see how I can generate and save them somewhere else
#PCA using ggplot
pcaData <- plotPCA(core_dds_transformed, intgroup = c("MEDIA", "ANCESTRY"), returnData = TRUE)
percentVar <- round(100*attr(pcaData, "percentVar"))
ggplot(data = pcaData, aes(x=PC1, y=PC2, color = MEDIA, shape = ANCESTRY)) +
geom_point(size =3) + xlab(paste0("PC1: ", percentVar[1], "% var")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
core_DE <- DESeq(core_dds)
#Set LFC threshold 1
core_DE_results <- results(core_DE, lfcThreshold = 1)
core_DE_results_sign <- subset(core_DE_results, padj < 0.05)
head(core_DE_results_sign[order(core_DE_results_sign$log2FoldChange, decreasing = TRUE),], 20)
core_DE_genes_final <- core_DE_results_sign[order(core_DE_results_sign$log2FoldChange, decreasing = TRUE),]
topGene <- rownames(core_DE_results_sign)[which.min(core_DE_results_sign$padj)]
plotCounts(core_dds, gene = topGene, intgroup = c("MEDIA"))
for (i in 1:14){
print (rownames(top)[i])
plotCounts(core_dds, gene = rownames(top)[i], intgroup = c("MEDIA"))
}
head(core_DE_genes_final)
gene_names <- rownames(core_DE_genes_final)
head(gene_names)
new_string = "string_split"
strsplit(new_string, "_")
strsplit(new_string, "_")[2]
strsplit(new_string, "_")[1]
class(strsplit(new_string, "_"))
unlist(strsplit(new_string, "_"))
unlist(strsplit(new_string, "_"))[2]
append("split", new_list)
new_list <- list()
append("split", new_list)
new_list
new_list <- append("split", new_list)
new_list
new_list[1]
new_list <- append('another')
gene_names <- rownames(core_DE_genes_final)
gene_names_edited <- list()
for (name in gene_names){
new_name <- unlist(strsplit(name, "_"))[2]
gene_names_edited <- append(new_name, gene_names_edited)
}
length(gene_names_edited)
head(gene_names_edited)
gene_names_edited <- unlist(gene_names_edited)
head(gene_names_edited)
head(gene_names)
for (name in gene_names){
print (name)
new_name <- unlist(strsplit(name, "_"))[2]
print(new_name)
gene_names_edited <- append(new_name, gene_names_edited)
}
library(readr)
DE_genes <- read_csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-DE-edited.csv")
View(X2017_01_23_core_genes_DE_edited)
DE_genes <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-DE-edited.csv", header = TRUE)
head(DE_genes)
ncol(DE_genes)
DE_genes <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-DE-edited.csv", header = TRUE, row.names = 8)
head(DE_genes)
de_genes <- DE_genes[,2:7]
head(de_genes)
row.names(de_genes)<- make.names(DE_genes[,8], TRUE)
head(de_genes)
symbols <- row.names(de_genes)
symbols
head(symbols)
source("http://bioconductor.org/biocLite.R")
biocLite("pathview")
biocLite("gage")
biocLite("org.EcK12.eg.db")
library(pathview)
biocLite("AnnotationDbi")
library(pathview)
library(AnnotationDbi)
biocLiite('update')
biocLite('update')
biocUpdatePackages(all)
biocLite
biocLite()
biocUpdatePackages()
biocUpdatePackages(c("AnnotationDbi"))
library(AnnotationDbi)
biocValid()
biocValid("AnnotationDbi")
library("AnnotationDbi")
library(pathview)
library(gage)
library(org.EcK12.eg.db)
library(readr)
DE_genes <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-DE-edited.csv", header = TRUE)
de_genes <- DE_genes[,2:7]
row.names(de_genes)<- make.names(DE_genes[,8], TRUE)
#create a vector of gene_symbols
symbols <- row.names(de_genes)
head(symbols)
ec.eg <- id2eg(ids = symbols, category = gene.idtype.list[1], org = "EcK12")
ec.eg
head(de_genes
)
gene_list <- cbind(ec.eg[,2], de_genes)
gene_list
head(gene_list)
colnames(ec.eg) <- c("gene_name", "ENSMBL")
gene_list <- cbind(ec.eg[,2], de_genes)
head(gene_list)
head(ec.eg)
gene_list <- cbind(ec.eg$ENSMBL, de_genes)
colnames(gene_list) <- c("ENSMBL", colnames(de_genes)
colnames(gene_list) <- c("ENSMBL", colnames(de_genes))
head(gene_list)
colnames(gene_list) <- c("ENSMBL", colnames(de_genes))
head(gene_list)
tail(gene_list)
gene_list <- gene_list[complete.cases(gene_list),]
tail(gene_list)
dim(gene_list)
analyze_list <- as.matrix(gene_list[,3])
rownames(analyze_list) <- gene_list[,2]
colnames(analyz_list) <- c("LFC")
colnames(analyze_list) <- c("LFC")
head(analyze_list)
analyze_list <- as.matrix(gene_list[,3])
rownames(analyze_list) <- gene_list[,1]
colnames(analyze_list) <- c("LFC")
head(analyze_list)
kegg.ec <- kegg.gsets(species = "eco", id.type = "entrez")
kg.ec <- kegg.ec$kg.sets[kegg.ec$sigmet.idx]
path.analysis <- gage(analyze_list, gsets = kg.ec)
path.analysis
write.csv(pathways_upregulated, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-pathways-UP.csv", row.names = TRUE)
pathways_upregulated <- path.analysis$greater
pathways_downregulated <- path.analysis$less
write.csv(pathways_upregulated, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-pathways-UP.csv", row.names = TRUE)
write.csv(pathways_downregulated, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-pathways-DOWN.csv, row.names = TRUE)
)
write.csv(pathways_downregulated, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/2017-01-23-core-genes-pathways-DOWN.csv", row.names = TRUE)
dim(gene_list)
dim(de_genes)
#Dependencies
library(DESeq2)
library (pheatmap)
library(RColorBrewer)
library (ggplot2)
source("~/git_repos/HUTI-RNAseq/code/RNAseq_counts_analysis_R/RNAseq_analysis_utilities.R")
#Importing the counts
combined_counts <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/counts/combined_counts.csv", header = TRUE, row.names = 1)
#Importing metadata
experiment_info <- read.csv("~/git_repos/HUTI-RNAseq/analysis/Patient_meta_info.csv", header = TRUE, row.names =1)
head(combined_counts)
#Isolating Core Genes
core_genes = combined_counts[complete.cases(combined_counts),]
summary(core_genes)
(even <- seq(2, 26, 2))
(odd <- seq(1, 26, 2))
(core_dds <- DESeqDataSetFromMatrix(countData = as.matrix(core_genes), colData = experiment_info,
design = ~MEDIA))
core_DE <- DESeq(core_dds)
core_DE_genes_final <- core_DE_results_sign[order(core_DE_results_sign$log2FoldChange, decreasing = TRUE),]
core_DE_results <- results(core_DE, lfcThreshold = 1)
core_DE_results_sign <- subset(core_DE_results, padj < 0.05)
core_DE_genes_final <- core_DE_results_sign[order(core_DE_results_sign$log2FoldChange, decreasing = TRUE),]
topGene <- rownames(core_DE_results_sign)[which.min(core_DE_results_sign$padj)]
topGene
core_dds
head(assay(core_dds))
assay(core_dds[topGene])
counts(core_dds[topGene])
plotCounts(core_dds, gene = topGene, intgroup = c("MEDIA"))
geneCounts <- plotCounts(core_dds, gene=topGene, intgroup = c("MEDIA"), returnData = TRUE)
head(geneCounts)
head(assay(core_dds))
row((head(assay(core_dds))))
rownames((head(assay(core_dds))))
gene_names <- rownames((head(assay(core_dds))))
geneCounts <- plotCounts(core_dds, gene=c(gene_names), intgroup = c("MEDIA"), returnData = TRUE)
?DESeq2
??`DESeq2-package`
topGene <- rownames(core_DE_results_sign)[which.min(core_DE_results_sign$padj)]
plotCounts(core_dds, gene = topGene, intgroup = c("MEDIA"))
plotCounts(core_dds, gene = topGene, intgroup = c("MEDIA"))
rm(list=ls())
clear
setwd("~/git_repos/HUTI-RNAseq/analysis/get-homologs/RPKM")
rpkms <- read.csv("~/git_repos/HUTI-RNAseq/analysis/get-homologs/RPKM/combined_RPKM.csv", header = TRUE, row.names = 1)
head(rpkms)
rpkms_log <- log2(rpkms+1)
head(rpkms_log)
?apply
NA_num <- rowSums(is.na(rpkms))
head (NA_num)
class(NA_num)
rpkms_means <- rowMeans(rpkms_log, na.rm = TRUE)
head (rpkms_means)
rpkms_means_withNA <- rowMeans(rpkms_log, na.rm = FALSE)
head(rpkms_means_withNA)
rpkms_means <- rowMeans(rpkms_log, na.rm = TRUE)
odd <- seq(1:26, 2)
odd <- seq(1,26, 2)
even <- seq(2,26,2)
urine_RPKM <- rpkms_log[,odd]
uti_RPKM <- rpkms_log[,even]
head(urine_RPKM)
ur_rpkms_means <- rowMeans(urine_RPKM, na.rm = TRUE)
uti_rpkms_means <- rowMeans(uti_RPKM, na.rm = TRUE)
?cbind
x <- cbind(ur_rpkms_means, uti_rpkms_means)
head(x)
ur_rpkms_means <- rowMeans(rpkms_log[,odd], na.rm = TRUE)
uti_rpkms_means <- rowMeans(rpkms_log[,even], na.rm = TRUE)
rpkms_means_LFC <- cbind(rpkms_log, ur_rpkms_means, uti_rpkms_means)
head(rpkms_means_LFC)
rpkms_means_LFC <- transform(rpkms_means_LFC, LFC = uti_rpkms_means/ur_rpkms_means)
head(rpkms_means_LFC)
rpkms_means_LFC <- cbind(rpkms_means_LFC, na_num = rowSums(is.na(rpkms_log)))
head(rpkms_means_LFC)
x <- order(rpkms_means_LFC, LFC)
?order
?order
x <- rpkms_means_LFC[order(rpkms_means_LFC$LFC),]
head(x)
x <- rpkms_means_LFC[order(-rpkms_means_LFC$LFC),]
head(x)
uti_rpkms_means[uti_rpkms_means == 0] <- NA
rpkms_means_LFC <- cbind(rpkms_log, ur_rpkms_means, uti_rpkms_means)
rpkms_means_LFC <- transform(rpkms_means_LFC, LFC = uti_rpkms_means/ur_rpkms_means)
rpkms_means_LFC <- cbind(rpkms_means_LFC, na_num = rowSums(is.na(rpkms_log)))
x <- rpkms_means_LFC[order(-rpkms_means_LFC$LFC),]
head(x)
head (uti_rpkms_means)
ur_rpkms_means <- rowMeans(rpkms_log[,odd], na.rm = TRUE)
uti_rpkms_means <- rowMeans(rpkms_log[,even], na.rm = TRUE)
ur_rpkms_means[uti_rpkms_means == 0] <- NA
rpkms_means_LFC <- cbind(rpkms_log, ur_rpkms_means, uti_rpkms_means)
rpkms_means_LFC <- transform(rpkms_means_LFC, LFC = uti_rpkms_means/ur_rpkms_means)
rpkms_means_LFC <- cbind(rpkms_means_LFC, na_num = rowSums(is.na(rpkms_log))
)
x <- rpkms_means_LFC[order(-rpkms_means_LFC$LFC),]
head(x)
head(ur_rpkms_means)
head(ur_rpkms_means[ur_rpkms_means == 0,])
head(ur_rpkms_means[ur_rpkms_means == 0])
head(x, 100)
x <- rpkms_means_LFC[order(-rpkms_means_LFC$LFC, rpkms_means_LFC$na_num),]
head(x)
x <- rpkms_means_LFC[order(-rpkms_means_LFC$LFC, -rpkms_means_LFC$na_num),]
head(x)
x <- rpkms_means_LFC[order(rpkms_means_LFC$na_num),]
head(x)
x <- rpkms_means_LFC[order(rpkms_means_LFC$na_num, -rpkms_means_LFC$LFC),]
x
head(x)
x <- rpkms_means_LFC[order(rpkms_means_LFC$na_num, -rpkms_means_LFC$LFC),]
y <- x[x$LFC > 1,]
head(y)
nrow(y)
dim(y)
an <- y[,c(27,28)]
head(an)
write.csv(an, "~/git_repos/HUTI-RNAseq/analysis/get-homologs/RPKM/ur_vs_uti_means.csv", row.names=TRUE)
