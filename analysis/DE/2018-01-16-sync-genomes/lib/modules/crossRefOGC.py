__author__ = "annasintsova"

"""
This function takes in the pangenome matrix and directory of OGC generated by get_homologues
and returns a table of all orthologous genes. Ignores paralogs. 

Note to self: for MG1655 and CFT073 get_homologues gives protein_id not locus_tags, need to
parse out locus_tags from gbk files. 


Missing genes will be represented by NaN, multiple copies by "PARALOGS"

Generates csv file in the same directory as pangenome matrix ending with 'crossRef.csv'


"""


import pandas as pd
import os
import re
import numpy as np


def crossRefFromPangenome(pangenome_matrix, OGC_dir): # only need one input really, replace with glob.glob

    # Read in the pangenome matrix
    pgm = pd.read_csv(pangenome_matrix, sep="\t", index_col=0).T

    # Remove 'gbf' from column names
    pgm.columns = [c.split(".")[0] for c in list(pgm.columns)]  # Columns are names of the genomes
    pgm.columns.name = ''

    # Go through each cell of pangenome matrix, and replace 1 with appropriate gene_ids
    for index, row in pgm.iterrows():  # Index is the name of orthologous cluster

        for col in list(pgm.columns):
            if row[col] == 1:
                if "HM0" in col:  # Some files are named HM07, some HM7, want to be able to find both
                    genome_re = re.compile(col+"_|" + col.replace("0", "")+"_")
                else:
                    genome_re = re.compile(col)

                with open(os.path.join(OGC_dir, index), "r") as fh:
                    for line in fh:
                        if genome_re.search(line):
                            # Get ">ID:" put it instead of one.
                            gene_id = line.split("|")[0].lstrip(">ID:").rstrip()
                            pgm.loc[index, col] = gene_id

            elif row[col] > 1:
                pgm.loc[index, col] = "PARALOGS"
            elif row[col] == 0:
                pgm.loc[index, col] = np.nan
            else:
                continue  # Hopefully this doesn't happen

    out_file = os.path.join(OGC_dir, (pangenome_matrix.split(".")[0]+"_crossRef.csv"))
    pgm.to_csv(out_file) # maybe add the date
    return out_file  # Returns the path to the file


if __name__ == "__main__":
    pangenome_matrix = "/Users/annasintsova/git_repos/HUTI-RNAseq/data/get_homologs_output/C50_S90_e0_/run_C50_S90_e0__pan_C50_S90/pangenome_matrix_t0.tab"
    OGC_dir = "/Users/annasintsova/git_repos/HUTI-RNAseq/data/get_homologs_output/C50_S90_e0_/run_C50_S90_e0__pan_C50_S90"
    crossRefFromPangenome(pangenome_matrix, OGC_dir)